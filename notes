
DOCKER/COMPOSER COMMANDS:

docker-compose stop      # Pauses containers (they still exist), use that end of day
docker-compose start     # Resumes them
docker-compose restart

docker-compose down           # Stops and removes containers, stops the network, database and data persist
docker-compose down -v        # Also removes volumes, use for a fresh start
docker-compose up --build -d  # Starts or resumes your containers and builds Dockerfile
docker-compose up -d	      # Starts or resumes your containers
# eventually you'll want to rebuilt the container locally. need to ignore cache for that, so up -d will fail
	docker-compose build --no-cache drupal 

docker ps				list running containers (and get their names)
docker cp container_id:path local_path		copy contents to/from container
docker cp b1a5a7c9b1b8:/opt/drupal/web/sites/default/files/config_gCohTr204_tUOHEoCSoqQdwbSTu87xtRCQZHJalG7RX3qSVKy3vy5Se3bI1B9pRplYijH-tFCA/sync backup/

docker exec -it drupal-platform_drupal_1  bash		enter the container
docker exec -it drupal-platform_db_1  bash		enter the database container?


INSIDE THE CONTAINER:

docker exec or composer		Use commands inside the running container, update code or modules

#must run these from project root (on container)! that's where composer.json is found.
composer require drupal/group
composer require drupal/bootstrap5


PRE-DEPLOY:

# test build
docker-compose down
docker-compose build --no-cache drupal
composer require drush/drush
. post_install_steps.sh
drush cr

# build a lockfile from package versions specified in composer.json (run locally!)
	composer update --no-interaction
to do this you will need to install composer on local machine:
	sudo apt update
	sudo apt install -y php-cli unzip curl
	curl -sS https://getcomposer.org/installer -o composer-setup.php
	sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
	rm composer-setup.php
	composer --version
if you get an error about missing PHP extensions, install with e.g.:
	sudo apt update
	sudo apt install -y php8.3-xml php8.3-curl
	sudo apt install -y php8.3-zip php8.3-mbstring php8.3-gd php8.3-intl php8.3-mysql


BACKUPS:

(Use maintenance mode when upgrading, importing or exporting content, modifying a theme, modifying content types, and making backups.)

drush archive:dump --destination=/var/www/html/modules/custom/backup.tar.gz  --exclude-code-paths=web/sites/default/settings.php
	follow this with e.g.: mv modules/custom/backup.tar.gz backup2.tar.gz
	backup files and database, excluding the settings file which contains secrets.
	can put secrets in settings.local.php, but whatevs
	for regular-basis backups during development, sql:dump is probs fine


CONTRIB UPDATES (backup first):

when GUI updating fails:
drush sset system.maintenance_mode 1
e.g.:
	composer update drupal/bootstrap5 --with-all-dependencies
OR (esp. if that fails [due to fixed version?]):
	composer require drupal/bootstrap5:^5.3 --with-all-dependencies
drush updb -y
might need: drush cron
might need: drush ev 'Drupal::service("update.manager")->refreshUpdateData();'
drush cr
drush sset system.maintenance_mode 0


CORE UPDATES (clear all errors and backup first):

drush sset system.maintenance_mode 1
TRY: composer update "drupal/core-*" --with-all-dependencies
IF IT FAILS, it's probaby because you've fixed the version? so use require: 
composer require \
  drupal/core-recommended:^10.5 \
  drupal/core-composer-scaffold:^10.5 \
  drupal/core-project-message:^10.5 \
  --with-all-dependencies
drush updb -y
drush cron
drush ev 'Drupal::service("update.manager")->refreshUpdateData();'
drush cr
drush sset system.maintenance_mode 0


OTHER

drush en <module>				enable module (-y flag if desired)
drush pm:uninstall <module>		always run this before removing module files!
drush wd-show					logs
drush pm:list --status=enabled --type=module

---------------- BUILD STEPS NOW AUTOMATED -----------------

add to /var/www/html/sites/default/settings.php:
$settings['trusted_host_patterns'] = [
  '^localhost$',
  '^127\.0\.0\.1$',
  '^swislr\.org$',
  '^www\.swislr\.org$',
];

composer require drupal/admin_toolbar
drush en admin_toolbar admin_toolbar_tools
drush en content_moderation (need to provide input [enter] here)
composer require drupal/geofield
drush en geofield
composer require drupal/geofield_map drupal/geocoder
drush en geofield_map geocoder

#add content types. did this manually in dashboard
#add permissions. this page has a table that helps: https://www.drupal.org/docs/8/core/modules/content-moderation/overview

composer require drupal/token
drush en token
composer require drupal/pathauto
drush en pathauto
composer require drupal/entity_reference_revisions
drush en entity_reference_revisions
composer require drupal/webform
drush en webform
composer require drupal/smtp
drush en smtp

#install webform dependencies. don't actually need all of these. requires "y" input
composer require wikimedia/composer-merge-plugin
#add this to composer.json, under "extra":
        "merge-plugin": {
            "include": [
                "web/modules/contrib/webform/composer.libraries.json"
            ]
        }

composer update drupal/webform "drupal/webform-*" --with-dependencies

#make a place for private files (resolves a warning)
cd /opt
mkdir drupal_private
chown www-data:www-data drupal_private/
chmod 700 drupal_private
#add this to web/sites/default/settings.php:
$settings['file_private_path'] = '/opt/drupal_private';
drush cr

composer require drupal/honeypot
drush en honeypot

composer require drupal/email_registration
drush en email_registration 

#enabling these requires input
composer require drupal/leaflet drupal/geofield_map drupal/block_class
drush en leaflet geofield_map block_class 

#enable custom modules
mkdir -p /var/www/html/modules/custom

----- TO DO ----------
composer require --dev drush/drush
run the post install script
might need to change ownership for all the files that are bind mounted

when development is complete, copy composer.lock into the repo and version control it. ensure that it gets copied onto the container during build. it will lock dependencies


----- TIPS ----------

if i'm ever going to develop themes or modules, do so outside the container, then mount from within
volumes:
  - ./themes:/var/www/html/themes
  - ./modules:/var/www/html/modules

is this contradictory? To develop themes or modules, mount them directly from your host machine instead of named volumes.
For production, consider replacing `volumes:` with bind mounts and add HTTPS, caching (e.g., Varnish), and backup mechanisms.

in dockerfile, build custom modules/themes (or anything that will change frequently) last.
that way, the system can cache the earlier steps and build will be faster


---- DIRECTORY ------------
drupal home for my first build was /opt/drupal/web (and i think the dir "drupal" was specified by me?)
alongside this home ("web") folder are vendor/, composer.json, and composer.lock

1. core/
    Contains built-in themes, modules, routing, and services
    Leave this untouched; update it via Composer when needed
2. modules/
	modules/contrib/ → For downloaded modules (e.g., Group, Webform)
	modules/custom/ → For modules you write yourself
    These folders don’t exist by default, but you can create them.
3. themes/
	themes/contrib/ → Downloaded themes
	themes/custom/ → Custom themes you create
	Start with something like Classy, Bootstrap 5, or Olivero
		Extend it as a subtheme
	find themes here: https://www.drupal.org/project/project_theme
	install like so: composer require drupal/bootstrap5
4. sites/default/
        settings.php: site config (DB, trusted hosts, etc.)
        services.yml: service overrides (e.g., Twig debugging)
        files/: uploaded user content
    You can have multi-site setups, each under sites/example.com/, but default is typical
5. profiles/
    Installation profiles (like pre-built site templates)
    Ignore this unless you're distributing your own "starter kit"




-------- modules

find modules here
	https://www.drupal.org/project/project_module

install like so
	composer require drupal/group


Group	Create collaborative spaces (research groups, labs, teams) with their own content and permissions
File Entity	Manage uploaded files as standalone entities (with metadata, revisions)
IMCE	User-friendly file browser/uploader for images/docs
Media	Standardized media management (images, files, videos)
Private Files	Restrict access to uploaded files
Content Moderation	Workflow for draft/review/publish
Webform	Flexible surveys, data collection, and contact forms
Discussion	Enable commenting and threads on content
Search API + Solr	Powerful search for content and files
CAS / SAML / LDAP	Institutional login integration (if needed)
